// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routeguide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZachExampleClient is the client API for ZachExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZachExampleClient interface {
	// Simple input output
	MathematicalFunction(ctx context.Context, in *NumberInput, opts ...grpc.CallOption) (*NumberOutput, error)
	// Number from client, Return 0 - all the numbers received
	ZeroToNumber(ctx context.Context, in *NumberInput, opts ...grpc.CallOption) (ZachExample_ZeroToNumberClient, error)
	// Stream from client, sum all the numbers received
	SumAllNumbers(ctx context.Context, opts ...grpc.CallOption) (ZachExample_SumAllNumbersClient, error)
	// Simply send numbers back and forth
	NumbersBackAndForth(ctx context.Context, opts ...grpc.CallOption) (ZachExample_NumbersBackAndForthClient, error)
}

type zachExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewZachExampleClient(cc grpc.ClientConnInterface) ZachExampleClient {
	return &zachExampleClient{cc}
}

func (c *zachExampleClient) MathematicalFunction(ctx context.Context, in *NumberInput, opts ...grpc.CallOption) (*NumberOutput, error) {
	out := new(NumberOutput)
	err := c.cc.Invoke(ctx, "/zachexample.ZachExample/MathematicalFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zachExampleClient) ZeroToNumber(ctx context.Context, in *NumberInput, opts ...grpc.CallOption) (ZachExample_ZeroToNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZachExample_ServiceDesc.Streams[0], "/zachexample.ZachExample/ZeroToNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &zachExampleZeroToNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZachExample_ZeroToNumberClient interface {
	Recv() (*NumberOutput, error)
	grpc.ClientStream
}

type zachExampleZeroToNumberClient struct {
	grpc.ClientStream
}

func (x *zachExampleZeroToNumberClient) Recv() (*NumberOutput, error) {
	m := new(NumberOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zachExampleClient) SumAllNumbers(ctx context.Context, opts ...grpc.CallOption) (ZachExample_SumAllNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZachExample_ServiceDesc.Streams[1], "/zachexample.ZachExample/SumAllNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &zachExampleSumAllNumbersClient{stream}
	return x, nil
}

type ZachExample_SumAllNumbersClient interface {
	Send(*NumberInput) error
	CloseAndRecv() (*NumberOutput, error)
	grpc.ClientStream
}

type zachExampleSumAllNumbersClient struct {
	grpc.ClientStream
}

func (x *zachExampleSumAllNumbersClient) Send(m *NumberInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zachExampleSumAllNumbersClient) CloseAndRecv() (*NumberOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumberOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zachExampleClient) NumbersBackAndForth(ctx context.Context, opts ...grpc.CallOption) (ZachExample_NumbersBackAndForthClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZachExample_ServiceDesc.Streams[2], "/zachexample.ZachExample/NumbersBackAndForth", opts...)
	if err != nil {
		return nil, err
	}
	x := &zachExampleNumbersBackAndForthClient{stream}
	return x, nil
}

type ZachExample_NumbersBackAndForthClient interface {
	Send(*NumberInput) error
	Recv() (*NumberOutput, error)
	grpc.ClientStream
}

type zachExampleNumbersBackAndForthClient struct {
	grpc.ClientStream
}

func (x *zachExampleNumbersBackAndForthClient) Send(m *NumberInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zachExampleNumbersBackAndForthClient) Recv() (*NumberOutput, error) {
	m := new(NumberOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZachExampleServer is the server API for ZachExample service.
// All implementations must embed UnimplementedZachExampleServer
// for forward compatibility
type ZachExampleServer interface {
	// Simple input output
	MathematicalFunction(context.Context, *NumberInput) (*NumberOutput, error)
	// Number from client, Return 0 - all the numbers received
	ZeroToNumber(*NumberInput, ZachExample_ZeroToNumberServer) error
	// Stream from client, sum all the numbers received
	SumAllNumbers(ZachExample_SumAllNumbersServer) error
	// Simply send numbers back and forth
	NumbersBackAndForth(ZachExample_NumbersBackAndForthServer) error
	mustEmbedUnimplementedZachExampleServer()
}

// UnimplementedZachExampleServer must be embedded to have forward compatible implementations.
type UnimplementedZachExampleServer struct {
}

func (UnimplementedZachExampleServer) MathematicalFunction(context.Context, *NumberInput) (*NumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MathematicalFunction not implemented")
}
func (UnimplementedZachExampleServer) ZeroToNumber(*NumberInput, ZachExample_ZeroToNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method ZeroToNumber not implemented")
}
func (UnimplementedZachExampleServer) SumAllNumbers(ZachExample_SumAllNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method SumAllNumbers not implemented")
}
func (UnimplementedZachExampleServer) NumbersBackAndForth(ZachExample_NumbersBackAndForthServer) error {
	return status.Errorf(codes.Unimplemented, "method NumbersBackAndForth not implemented")
}
func (UnimplementedZachExampleServer) mustEmbedUnimplementedZachExampleServer() {}

// UnsafeZachExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZachExampleServer will
// result in compilation errors.
type UnsafeZachExampleServer interface {
	mustEmbedUnimplementedZachExampleServer()
}

func RegisterZachExampleServer(s grpc.ServiceRegistrar, srv ZachExampleServer) {
	s.RegisterService(&ZachExample_ServiceDesc, srv)
}

func _ZachExample_MathematicalFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZachExampleServer).MathematicalFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zachexample.ZachExample/MathematicalFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZachExampleServer).MathematicalFunction(ctx, req.(*NumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZachExample_ZeroToNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZachExampleServer).ZeroToNumber(m, &zachExampleZeroToNumberServer{stream})
}

type ZachExample_ZeroToNumberServer interface {
	Send(*NumberOutput) error
	grpc.ServerStream
}

type zachExampleZeroToNumberServer struct {
	grpc.ServerStream
}

func (x *zachExampleZeroToNumberServer) Send(m *NumberOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _ZachExample_SumAllNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZachExampleServer).SumAllNumbers(&zachExampleSumAllNumbersServer{stream})
}

type ZachExample_SumAllNumbersServer interface {
	SendAndClose(*NumberOutput) error
	Recv() (*NumberInput, error)
	grpc.ServerStream
}

type zachExampleSumAllNumbersServer struct {
	grpc.ServerStream
}

func (x *zachExampleSumAllNumbersServer) SendAndClose(m *NumberOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zachExampleSumAllNumbersServer) Recv() (*NumberInput, error) {
	m := new(NumberInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZachExample_NumbersBackAndForth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZachExampleServer).NumbersBackAndForth(&zachExampleNumbersBackAndForthServer{stream})
}

type ZachExample_NumbersBackAndForthServer interface {
	Send(*NumberOutput) error
	Recv() (*NumberInput, error)
	grpc.ServerStream
}

type zachExampleNumbersBackAndForthServer struct {
	grpc.ServerStream
}

func (x *zachExampleNumbersBackAndForthServer) Send(m *NumberOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zachExampleNumbersBackAndForthServer) Recv() (*NumberInput, error) {
	m := new(NumberInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZachExample_ServiceDesc is the grpc.ServiceDesc for ZachExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZachExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zachexample.ZachExample",
	HandlerType: (*ZachExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MathematicalFunction",
			Handler:    _ZachExample_MathematicalFunction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ZeroToNumber",
			Handler:       _ZachExample_ZeroToNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SumAllNumbers",
			Handler:       _ZachExample_SumAllNumbers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "NumbersBackAndForth",
			Handler:       _ZachExample_NumbersBackAndForth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zach-example/zach-example.proto",
}
